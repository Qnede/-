#include <Servo.h>
#include "I2Cdev.h"
#include "MPU6050_6Axis_MotionApps_V6_12.h"
#include <SFE_BMP180.h>
#include "Wire.h"
#include<SPI.h>
#include<RF24.h>

RF24 radio(9, 10);
float data[6];
SFE_BMP180 pressure;
MPU6050 mpu;
MPU6050 accelgyro;
double P0 = 0;
float angleX = 0;
float angleY = 0;
float angleZ = 0;
int b=0;
int k=0;
int j=0;
int l=0;
int row_excel = 0;
int16_t ax, ay, az;
int16_t gx, gy, gz;
int Time;


Servo up;
void setup() {
Serial.begin(115200);
Wire.begin();
 radio.begin();                                      
    radio.setChannel(5);                                  
    radio.setDataRate     (RF24_1MBPS);                   
    radio.setPALevel      (RF24_PA_HIGH);                
    radio.openWritingPipe (0x1234567890LL);  
pressure.begin();

Wire.setClock(400000);


accelgyro.initialize();
P0 = getPressure();
pinMode(2, OUTPUT);


mpu.initialize();
initDMP();

mpu.CalibrateAccel(6);
mpu.CalibrateGyro(6);

up.attach(3);
up.write(0);
}
void loop() {
while(b>=0&&b<=4){

getAngles();
Serial.print(angleX); Serial.print(',');
Serial.print(angleY); Serial.print(',');
Serial.println(angleZ);
data[0]=angleX;
data[1]=angleY;
data[2]=angleZ;
accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
Serial.print("\t");
Serial.println(gz);
data[3]=gz;


double P, Alt;

P = getPressure();
Alt = pressure.altitude(P,P0);
Serial.println(Alt, 2);


data[4]=Alt;
Time = millis();
data[5]= Time;

radio.write(&data, sizeof(data)); 


//выполнение сос пакета



if(b==4)
{
up.write(180);
Serial.print("Start spas program");
b++;
}

//выполнение штатных задач
else if(j==4)
{
digitalWrite(2, HIGH);
b=5;
Serial.print(" Start next Engine");
}

//условие сос
else if(fabs (angleX)>80||fabs (angleY)>80)
{
b++;

}

//условие штатки
else if(k>gz){
j++;
}
// сбросс
else{
b=0;
j=0;
k=gz;
}
}
}

// НУЖНЫЕ ПЕРЕМЕННЫЕ
const float toDeg = 180.0 / M_PI;
uint8_t mpuIntStatus; // holds actual interrupt status byte from MPU
uint8_t devStatus; // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize; // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount; // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer
Quaternion q; // [w, x, y, z] quaternion container
VectorFloat gravity; // [x, y, z] gravity vector
float ypr[3]; // [yaw, pitch, roll] yaw/pitch/roll container and gravity vector
// инициализация
void initDMP() {
devStatus = mpu.dmpInitialize();
mpu.setDMPEnabled(true);
mpuIntStatus = mpu.getIntStatus();
packetSize = mpu.dmpGetFIFOPacketSize();
}
// получение углов в angleX, angleY, angleZ
void getAngles() {
if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer)) {
mpu.dmpGetQuaternion(&q, fifoBuffer);
mpu.dmpGetGravity(&gravity, &q);
mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
angleX = ypr[2] * toDeg;
angleY = ypr[1] * toDeg;
angleZ = ypr[0] * toDeg;
}
}

double getPressure(){
char status;
double T,P,p0,a;

status = pressure.startTemperature();
if (status != 0){
// ожидание замера температуры
delay(status);
status = pressure.getTemperature(T);
if (status != 0){
status = pressure.startPressure(3);
if (status != 0){
// ожидание замера давления
delay(status);
status = pressure.getPressure(P,T);
if (status != 0){
return(P);
}
}
}
}
}
